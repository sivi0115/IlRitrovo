APPUNTI SULLE PAGINE E LAVORI DA FARCI SOPRA:

COSE PER MARCO:
aggiungere a VUser, checkRegister questa logica:
   if ($userFoundByUsername) {
      $smarty->assign('error', 'Username già in uso. Scegli un altro.');
      $smarty->display('signup.tpl');
      return;
   }

   if ($userFoundByEmail) {
      $smarty->assign('error', 'Email già registrata. Effettua il login o usa un’altra email.');
      $smarty->display('signup.tpl');
      return;
   }
a cosa dovrebbe servire? serve a ricaricare la pagina di registrazione con un messaggio di errore se sceglie
una mail o un username già in uso.

ELENCO PRIORITA' DA FARE:
- come gestire gli errori e le pagine di errore
- cookies
- vedere dove aggiungere gli |escape per la sicurezza

PAGINE PER L'UTENTE:
 1. HOME:
    testata
 2. ROOMS
    testata
 3. REVIEWS
    ok
 4. MENU
    testata

PAGINE PER L'UTENTE REGISTRATO:
 5. USER-PROFILE
    ok
 6. RESERVATION-TABLE-1
    testata
 7. RESERVATION-TABLE-2
    testata
 8. RESERVATION-TABLE-3
    testata
 9. RESERVATION-ROOM-1
    testata
10. RESERVATION-ROOM-2
    testata
11. RESERVATION-ROOM-3
    ok
12. RESERVATION-ROOM-4
    ok

SEZIONI UTILI DI FUNZIONAMENTO PER L'USER:
1. HEADER-USER
   testata
2. FOOTER-USER
   testata
3. LOGIN
   testata
4. SIGN-UP
   testata

PAGINE PER L'ADMIN:
1. HOME
   ok
2. USERS
   ok
3. EXTRAS
   ok
4. REVIEWS
   ok

SEZIONI UTILI DI FUNZIONAMENTO PER L'ADMIN:
1. HEADER-ADMIN:
   ok
2. FOOTER ADMIN:
   ok

      //FUNCTION CONTROLLER SHOW MENU
       public static function showMenuPage() {
        $view=new VUser();
        $session=USessions::getIstance();
        if($isLogged=CUser::isLogged()) {
            $idUser=$session->readValue('idUser');
            //Carico l'utente da db
            $user=FPersistentManager::getInstance()->read($idUser, FUser::class);
            //Controllo che sia amministratore o utente normale, se è utente normale
            if($user->isUser() && $user->getBan()===0) {
                //Mostro l'header con l'informazione che l'utente è loggato
                $view->showUserHeader($isLogged);
                //Carico la menu page correttamente per l'utente loggato
                $view->showLoggedMenuPage($isLogged);
            }
        } else {
            //Mostro l'header con l'informazione che l'utente non è loggato
            $view->showUserHeader($isLogged);
            //Carico la menu page correttamente per l'utente non loggato
            $view->showMenuPage($isLogged);
        }
    }

    //2 FUNCTION VIEW SHOW MENU
    /**
     * Function to show non unlogged user menu page
     */
    public function showMenuPage(bool $isLogged) {
        $smarty = new Smarty();
        $smarty->setTemplateDir(__DIR__ . '/../Smarty/tpl/');
        $smarty->setCompileDir(__DIR__ . '/../Smarty/templates_c/');
        $smarty->assign('isLogged', $isLogged);
        $smarty->display('menu.tpl');
    }

    /**
     * Function to show logged user menu page
     */
    public function showLoggedMenuPage(bool $isLogged) {
        $smarty = new Smarty();
        $smarty->setTemplateDir(__DIR__ . '/../Smarty/tpl/');
        $smarty->setCompileDir(__DIR__ . '/../Smarty/templates_c/');
        $smarty->assign('isLogged', $isLogged);
        $smarty->display('menu.tpl');
    }

      //FUNCTION CONTROLLER SHOW ROOMS
       public static function showRoomsPage() {
        $view=new VUser();
        $session=USessions::getIstance();
        if($isLogged=CUser::isLogged()) {
            $idUser=$session->readValue('idUser');
            //Carico l'utente da db
            $user=FPersistentManager::getInstance()->read($idUser, FUser::class);
            //Controllo che sia amministratore o utente normale, se è utente normale
            if($user->isUser() && $user->getBan()===0) {
                //Mostro l'header con l'informazione che l'utente è loggato
                $view->showUserHeader($isLogged);
                //Carico la rooms page correttamente per l'utente loggato
                $view->showLoggedRoomsPage($isLogged);
            }
        } else {
            //Mostro l'header con l'informazione che l'utente non è loggato
            $view->showUserHeader($isLogged);
            //Carico la rooms page correttamente per l'utente non loggato
            $view->showRoomsPage($isLogged);
        }
    }

    //2 FUNCTION VIEW SHOW ROOMS
    /**
     * Function to show non unlogged user rooms page
     */
    public function showRoomsPage(bool $isLogged) {
        $smarty = new Smarty();
        $smarty->setTemplateDir(__DIR__ . '/../Smarty/tpl/');
        $smarty->setCompileDir(__DIR__ . '/../Smarty/templates_c/');
        $smarty->assign('isLogged', $isLogged);
        $smarty->display('rooms.tpl');
    }

    /**
     * Function to show logged user rooms page
     */
    public function showLoggedRoomsPage(bool $isLogged) {
        $smarty = new Smarty();
        $smarty->setTemplateDir(__DIR__ . '/../Smarty/tpl/');
        $smarty->setCompileDir(__DIR__ . '/../Smarty/templates_c/');
        $smarty->assign('isLogged', $isLogged);
        $smarty->display('rooms.tpl');
    }